name: Python Package using Conda

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.11"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: environment.yml
        auto-activate-base: false
        auto-update-conda: true
        use-only-tar-bz2: true  # Faster on Windows

    - name: Conda config
      shell: bash -l {0}
      run: |
        conda config --set channel_priority strict || true
        conda config --set solver libmamba || true

    - name: Verify CasADi and ipopt installation
      shell: bash -l {0}
      run: |
        conda activate larrak
        python -c "import casadi as ca; print('CasADi version:', getattr(ca, '__version__', 'unknown')); print('Available NLP solvers:', ca.nlpsol_plugins() if hasattr(ca, 'nlpsol_plugins') else []); x = ca.SX.sym('x'); f = x**2; ca.nlpsol('s','ipopt',{'x':x,'f':f}); print('ipopt usable')"

    - name: Install package in development mode
      shell: bash -l {0}
      run: |
        conda activate larrak
        pip install -e .

    - name: Run ruff linting
      shell: bash -l {0}
      run: |
        conda activate larrak
        ruff check . --output-format=github

    - name: Run ruff formatting check
      shell: bash -l {0}
      run: |
        conda activate larrak
        ruff format --check .

    - name: Run mypy type checking
      shell: bash -l {0}
      run: |
        conda activate larrak
        mypy --strict campro/ CamPro_OptimalMotion.py

    - name: Run pytest with coverage
      shell: bash -l {0}
      run: |
        conda activate larrak
        pytest tests/ --cov=campro --cov=CamPro_OptimalMotion --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test environment validation
      shell: bash -l {0}
      run: |
        conda activate larrak
        python scripts/check_environment.py --strict

  quick-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy

    - name: Run ruff linting
      run: ruff check . --output-format=github

    - name: Run mypy type checking
      run: mypy --strict campro/ CamPro_OptimalMotion.py